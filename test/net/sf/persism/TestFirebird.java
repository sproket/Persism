package net.sf.persism;

import net.sf.persism.categories.ExternalDB;
import net.sf.persism.dao.*;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.experimental.categories.Category;
import org.junit.rules.TestRule;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import static net.sf.persism.Parameters.params;
import static net.sf.persism.SQL.sql;
import static net.sf.persism.UtilsForTests.*;
import static net.sf.persism.UtilsForTests.isViewInDatabase;
@Category(ExternalDB.class)
public class TestFirebird extends BaseTest {

    private static final Log log = Log.getLogger(TestFirebird.class);
//    private static long now;

    // later

// https://www.hascode.com/2013/03/micro-benchmarking-your-tests-using-junit-and-junitbenchmarks/
// http://labs.carrotsearch.com/junit-benchmarks-tutorial.html

//
//    @Rule
//    public TestRule benchmarkRun = new BenchmarkRule();

//    @BeforeClass
//    public void benchStart() {
//        now = System.currentTimeMillis();
//    }
//
//    @AfterClass
//    public void benchEnd() {
//        log.info("TIME: " + (System.currentTimeMillis() - now));
//    }

    @Override
    public void setUp() throws Exception {
        connectionType = ConnectionTypes.Firebird;
        super.setUp();

        if (getClass().equals(TestFirebird.class)) {
            Properties props = new Properties();
            props.load(getClass().getResourceAsStream("/firebird.properties"));
            String driver = props.getProperty("database.driver");
            String url = props.getProperty("database.url");
            String username = props.getProperty("database.username");
            String password = props.getProperty("database.password");
            Class.forName(driver);
            // defaultHoldable
            con = DriverManager.getConnection(url, username, password);
//            con = DriverManager.getConnection(url, props);

            log.info(con.getMetaData().getDatabaseProductName());

            createTables();

            session = new Session(con);
        }
    }

    @Override
    public void testContactTable() throws SQLException {
        super.testContactTable();
        assertTrue(true);
    }

    @Override
    protected void createTables() throws SQLException {
        String sql;

        if (isProcedureInDatabase("spCustomerOrders", con)) {
            executeCommand("DROP PROCEDURE spCustomerOrders", con);
        }

        if (isTableInDatabase("ORDERS", con)) {
            executeCommand("DROP TABLE ORDERS;", con);
        }


        sql = "CREATE TABLE ORDERS ( " +
                "id integer generated by default as identity primary key, " +
                " NAME VARCHAR(30), " +
                " PAID BOOLEAN, " +
                " Prepaid BOOLEAN," +
                " IsCollect BOOLEAN," +
                " IsCancelled BOOLEAN," +
                " CUSTOMER_ID VARCHAR(10), " +
                " CREATED TIMESTAMP DEFAULT 'NOW', " +
                " DATE_PAID TIMESTAMP, " +
                " DATE_SOMETHING TIMESTAMP " +
                "); ";

        executeCommand(sql, con);

        if (isViewInDatabase("CustomerInvoice", con)) {
            executeCommand("DROP VIEW CustomerInvoice", con);
        }

        if (isTableInDatabase("CUSTOMERS", con)) {
            executeCommand("DROP TABLE CUSTOMERS;", con);
            executeCommand("DROP GENERATOR GEN_CUSTOMER_ID;", con);
        }

        sql = "CREATE GENERATOR GEN_CUSTOMER_ID; ";
        executeCommand(sql, con);


        sql = "CREATE TABLE CUSTOMERS ( " +
                "  CUSTOMER_ID VARCHAR(10) NOT NULL, " +
                "  COMPANY_NAME VARCHAR(30) NOT NULL, " +
                "  CONTACT_NAME VARCHAR(30), " +
                "  CONTACT_TITLE VARCHAR(10), " +
                "  ADDRESS VARCHAR(40), " +
                "  CITY VARCHAR(30), " +
                "  REGION VARCHAR(10), " +
                "  POSTAL_CODE VARCHAR(20), " +
                "  COUNTRY VARCHAR(2) DEFAUlT 'US', " +
                "  PHONE VARCHAR(30), " +
                "  FAX VARCHAR(30), " +
                "  STATUS CHAR(1), " +
                "  DATE_REGISTERED TIMESTAMP default 'NOW', " +
                "  DATE_OF_LAST_ORDER DATE, " +
                " TestLocalDate DATE, " +
                " TestLocalDateTime TIMESTAMP, " +
                "  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID) " +
                "); ";
        executeCommand(sql, con);

        if (isTableInDatabase("Invoices", con)) {
            executeCommand("DROP TABLE Invoices", con);
        }

        executeCommand("CREATE TABLE Invoices ( " +
                " Invoice_ID integer generated by default as identity primary key, " +
                " Customer_ID varchar(10) NOT NULL, " +
                " Paid BOOLEAN NOT NULL, " +
                " Price NUMERIC(7,3) NOT NULL, " +
                " ACTUALPRICE NUMERIC(7,3) NOT NULL, " +
                " Status INT DEFAULT 1, " +
                " Created TIMESTAMP default 'NOW', " + // make read-only in Invoice Object
                " Quantity NUMERIC(10) NOT NULL, " +
                //" Total NUMERIC(10,3) NOT NULL, " +
                " Discount NUMERIC(10,3) NOT NULL " +
                ") ", con);

        sql = "CREATE VIEW CustomerInvoice AS\n" +
                " SELECT c.Customer_ID, c.Company_Name, i.Invoice_ID, i.Status, i.Created AS DateCreated, i.PAID, i.Quantity\n" +
                "       FROM Invoices i\n" +
                "       JOIN Customers c ON i.Customer_ID = c.Customer_ID\n";
                //"       WHERE i.Status = 1\n";
        executeCommand(sql, con);


        if (isTableInDatabase("Contacts", con)) {
            executeCommand("DROP TABLE Contacts", con);
        }
        // FIREBIRD and Derby don't like NULL
        sql = "CREATE TABLE Contacts( " +
                "   identity varchar(40) NOT NULL PRIMARY KEY, \n" +  // test binary(16)
                "   PartnerID varchar(36) NOT NULL, \n" + // test varchar(36)
                "   Type char(2) NOT NULL, \n" +
                "   Firstname varchar(50) NOT NULL, \n" +
                "   Lastname varchar(50) NOT NULL, \n" +
                "   ContactName varchar(50) NOT NULL, \n" +
                "   Company varchar(50) NOT NULL, \n" +
                "   Division varchar(50), \n" +
                "   Email varchar(50), \n" +
                "   Address1 varchar(50), \n" +
                "   Address2 varchar(50), \n" +
                "   City varchar(50), \n" +
                "   StateProvince varchar(50), \n" +
                "   ZipPostalCode varchar(10), \n" +
                "   Country varchar(50), \n" +
                "   Status SMALLINT, \n" +
                "   DateAdded Date, \n" +
                "   LastModified TIMESTAMP, \n" +
                "   Notes BLOB SUB_TYPE TEXT, \n" +
                "   AmountOwed REAL, \n" +
                "   \"BigInt\" DECIMAL(18), \n" +
                "   SomeDate TIMESTAMP, \n" +
                "   TestInstant TIMESTAMP, \n" +
                "   TestInstant2 TIMESTAMP, \n" +
                "   WhatMiteIsIt TIME, \n  " +
                "   WhatTimeIsIt TIME ) ";

        executeCommand(sql, con);


        // TIMESTAMP for DATETIME in Firebird

        if (isTableInDatabase("DateTestLocalTypes", con)) {
            executeCommand("DROP TABLE DateTestLocalTypes", con);
        }

        sql = "CREATE TABLE DateTestLocalTypes ( " +
                " ID INT, " +
                " Description VARCHAR(100), " +
                " DateOnly DATE, " +
                " TimeOnly TIME," +
                " DateAndTime TIMESTAMP) ";

        executeCommand(sql, con);

        if (isTableInDatabase("DateTestSQLTypes", con)) {
            executeCommand("DROP TABLE DateTestSQLTypes", con);
        }

        sql = "CREATE TABLE DateTestSQLTypes ( " +
                " ID INT, " +
                " Description VARCHAR(100), " +
                " DateOnly DATE, " +
                " TimeOnly TIME," +
                " UtilDateAndTime TIMESTAMP," +
                " DateAndTime TIMESTAMP) ";

        executeCommand(sql, con);

        if (UtilsForTests.isTableInDatabase("RecordTest1", con)) {
            executeCommand("DROP TABLE RecordTest1", con);
        }
        sql = "CREATE TABLE RecordTest1 ( " +
                "ID varchar(36), " +
                "NAME VARCHAR(20), " +
                "QTY INT, " +
                "PRICE REAL " +
                ") ";
        executeCommand(sql, con);

        if (UtilsForTests.isTableInDatabase("RecordTest2", con)) {
            executeCommand("DROP TABLE RecordTest2", con);
        }
        sql = "CREATE TABLE RecordTest2 ( " +
                "ID integer generated by default as identity primary key, " +
                "DESCRIPTION VARCHAR(20), " +
                "QTY INT, " +
                "PRICE REAL, " +
                "CREATED_ON TIMESTAMP DEFAULT 'NOW'" +
                ") ";
        executeCommand(sql, con);

        if (isTableInDatabase("InvoiceLineItems", con)) {
            executeCommand("DROP TABLE InvoiceLineItems", con);
        }
        sql = """
                CREATE TABLE InvoiceLineItems (
                    ID integer generated by default as identity primary key,
                    INVOICE_ID int,
                    Product_ID int,
                    Quantity int
                    )
                """;
        executeCommand(sql, con);

        if (isTableInDatabase("Products", con)) {
            executeCommand("DROP TABLE Products", con);
        }
        sql = """
                CREATE TABLE Products (
                    ID int,
                    Description VARCHAR(50),
                    COST NUMERIC(10,3)
                    )
                """;
        executeCommand(sql, con);


    }

    public void testSomething() {
        // what else?
        Collection<PropertyInfo> x = MetaData.getPropertyInfo(Customer.class);
        for (PropertyInfo pi : x) {
            log.warn(pi); // exercise toString for no good reason! Well, for code coverage...
        }
    }

    public void testOrders() throws SQLException {
        Order order = DAOFactory.newOrder(con);

        order.setPaid(true);
        order.setDatePaid(LocalDateTime.now());
        order.setCreated(LocalDate.now());
        order.setCustomerId("SOMEONE");

        session.insert(order);
    }

    public void testStoredProcedure() throws SQLException {

        if (true) {
            return;
        }
        String sql;

        if (isProcedureInDatabase("spCustomerOrders", con)) {
            executeCommand("DROP PROCEDURE spCustomerOrders", con);
        }

        log.error(con.getMetaData().getDatabaseProductName() + " " + con.getMetaData().getDatabaseProductVersion());
        // https://stackoverflow.com/questions/64350980/returning-a-table-in-firebird-3-0-with-stored-function-or-stored-procedure

        // https://ib-aid.com/download/docs/firebird-language-reference-2.5/fblangref25-ddl-procedure.html#create-procedure-examples
        sql = """
                CREATE PROCEDURE spCustomerOrders(cust_id VARCHAR(10))
                RETURNS ("Customer_ID" VARCHAR(10), "Company_Name" VARCHAR(40), "Order_ID" integer,
                         "Description" VARCHAR(40), "Date_Paid" TIMESTAMP, "DateCreated" TIMESTAMP, "Paid" BOOLEAN)
                AS
                BEGIN
                    FOR SELECT c.Customer_ID, c.Company_Name, o.ID Order_ID,
                          o.Name AS Description, o.Date_Paid, o.Created AS DateCreated, o.Paid
                            FROM ORDERS o
                            JOIN Customers c ON o.Customer_ID = c.Customer_ID
                       WHERE c.Customer_ID = :cust_id
                       INTO "Customer_ID", "Company_Name", "Order_ID", "Description", "Date_Paid", "DateCreated", "Paid"
                    DO
                    BEGIN
                        SUSPEND;
                    END
                END
                """;
        System.out.println(sql);
        executeCommand(sql, con);

        // todo this is copied from TestMSSQL - eventually we should move this into BaseTest
        Customer c1 = new Customer();
        c1.setCustomerId("123");
        c1.setCompanyName("ABC INC");
        c1.setRegion(Regions.East);
        c1.setStatus('1');
        session.insert(c1);
        session.fetch(c1);
        c1.setStatus('2');
        session.update(c1);

        Customer cx = new Customer();
        cx.setCustomerId("123");
        cx.setCompanyName("ABC INC");
        cx.setRegion(Regions.East);
        cx.setAddress("asasasas");
        cx.setStatus('e');
        session.update(cx);

        assertNotNull("Should be defaulted", c1.getDateRegistered());

        Customer c2 = new Customer();
        c2.setCustomerId("456");
        c2.setCompanyName("XYZ INC");
        session.insert(c2);

        Order order;
        order = DAOFactory.newOrder(con);
        order.setCustomerId("123");
        order.setName("ORDER 1");
        order.setCreated(LocalDate.now());
        order.setPaid(true);
        session.insert(order);

        order = DAOFactory.newOrder(con);
        order.setCustomerId("123");
        order.setName("ORDER 2");
        order.setCreated(LocalDate.now());
        order.setPaid(false);
        session.insert(order);

        session.fetch(order);

        List<CustomerOrder> list = session.query(CustomerOrder.class, "spCustomerOrders(?)", params("123"));
        log.info(list);
        // Both forms should work - the 1st is a cleaner way but this should be supported
        list = session.query(CustomerOrder.class, "{call spCustomerOrders(?) }", params("123"));
        log.info(list);

        // query orders by date
        //DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        //DateTimeFormatter df = DateTimeFormatter.ISO_DATE;

        List<Order> orders = session.query(Order.class, sql("select * from Orders where CONVERT(varchar, created, 112) = ?"), params(order.getCreated().format(DateTimeFormatter.ISO_LOCAL_DATE)));
        log.info("ORDERS?  " + orders);

        orders = session.query(Order.class, sql("select * from Orders where created = ?"), params(order.getCreated().format(DateTimeFormatter.ISO_LOCAL_DATE)));
        log.info("ORDERS AGAIN?  " + orders);


    }

    @Override
    public void testAllDates() {
        super.testAllDates();
    }
}
